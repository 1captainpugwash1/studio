'use server';
/**
 * @fileOverview This file defines a Genkit flow for answering user queries related to the Building Code of Australia (BCA).
 *
 * - answerBcaQuery - A function that takes a user's query as input and returns an answer generated by the AI chatbot.
 * - AnswerBcaQueryInput - The input type for the answerBcaQuery function.
 * - AnswerBcaQueryOutput - The return type for the answerBcaQuery function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerBcaQueryInputSchema = z.object({
  query: z.string().describe('The user query related to the Building Code of Australia.'),
});
export type AnswerBcaQueryInput = z.infer<typeof AnswerBcaQueryInputSchema>;

const AnswerBcaQueryOutputSchema = z.object({
  answer: z.string().describe('The answer to the user query, generated by the AI chatbot.'),
});
export type AnswerBcaQueryOutput = z.infer<typeof AnswerBcaQueryOutputSchema>;

export async function answerBcaQuery(input: AnswerBcaQueryInput): Promise<AnswerBcaQueryOutput> {
  return answerBcaQueryFlow(input);
}

const answerBcaQueryPrompt = ai.definePrompt({
  name: 'answerBcaQueryPrompt',
  input: {schema: AnswerBcaQueryInputSchema},
  output: {schema: AnswerBcaQueryOutputSchema},
  prompt: `You are an AI chatbot expert in the Building Code of Australia 2022 Volumes 1 & 2.
  Answer the following user query related to the Building Code of Australia:

  Query: {{{query}}}

  Answer:`,
});

const answerBcaQueryFlow = ai.defineFlow(
  {
    name: 'answerBcaQueryFlow',
    inputSchema: AnswerBcaQueryInputSchema,
    outputSchema: AnswerBcaQueryOutputSchema,
  },
  async input => {
    let retries = 0;
    const maxRetries = 3;
    while (retries < maxRetries) {
      try {
        const {output} = await answerBcaQueryPrompt(input);
        return output!;
      } catch (error: any) {
        if (error.message.includes('503 Service Unavailable') && retries < maxRetries - 1) {
          retries++;
          await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, retries))); // Exponential backoff
        } else {
          throw error;
        }
      }
    }
    throw new Error('Failed to get a response from the AI after multiple retries.');
  }
);
